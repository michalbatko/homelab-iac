- name: Install required packages
  apt:
    name:
      - sudo
      - unattended-upgrades
      - apt-listchanges
      - wget
      - gpg
      - gnupg
      - software-properties-common
      - unzip
      - ansible
      - nodejs
      - npm
      - certbot
      - python3-certbot-dns-cloudflare
      - python3-requests
      - python3-urllib3
      - python3-yaml
      - python3-jinja2
    state: present
    update_cache: yes

- name: Set server timezone
  timezone:
    name: Europe/Warsaw

- name: Copy 50unattended-upgrades file
  template:
    src: ../../templates/50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0644'
  notify: Restart unattended-upgrades

- name: Add HashiCorp GPG key
  apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg
    state: present
  ignore_errors: "{{ ansible_check_mode }}"

- name: Add HashiCorp repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com bookworm main"
    filename: hashicorp
    state: present
    update_cache: yes

- name: Install Terraform
  apt:
    name: terraform
    state: present
  ignore_errors: "{{ ansible_check_mode }}"

- name: Create actions-runner user account
  user:
    name: actions-runner
    home: /opt/actions-runner
    create_home: yes
    shell: /bin/bash
    system: yes
    state: present

- name: Download GitHub Actions runner package
  get_url:
    url: https://github.com/actions/runner/releases/download/v2.328.0/actions-runner-linux-x64-2.328.0.tar.gz
    dest: /opt/actions-runner/actions-runner-linux-x64-2.328.0.tar.gz
    owner: actions-runner
    group: actions-runner
    mode: '0644'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Unpack GitHub Actions runner package
  unarchive:
    src: /opt/actions-runner/actions-runner-linux-x64-2.328.0.tar.gz
    dest: /opt/actions-runner
    owner: actions-runner
    group: actions-runner
    remote_src: yes
    creates: /opt/actions-runner/run.sh
  ignore_errors: "{{ ansible_check_mode }}"

- name: Generate GitHub runner registration token
  uri:
    url: "https://api.github.com/repos/michalbatko/homelab-iac/actions/runners/registration-token"
    method: POST
    headers:
      Authorization: "Bearer {{ actions_access_token }}"
      Accept: "application/vnd.github.v3+json"
    status_code: 201
  register: runner_token_response
  no_log: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: Configure GitHub Actions runner
  command: >
    ./config.sh 
    --url https://github.com/michalbatko/homelab-iac 
    --token {{ runner_token_response.json.token }}
    --name {{ inventory_hostname }}
    --unattended
  args:
    chdir: /opt/actions-runner
    creates: /opt/actions-runner/.runner
  become_user: actions-runner
  no_log: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install GitHub Actions runner service
  command: ./svc.sh install actions-runner
  args:
    chdir: /opt/actions-runner
    creates: /etc/systemd/system/actions.runner.*.service
  become: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: Start and enable GitHub Actions runner service
  command: ./svc.sh start
  args:
    chdir: /opt/actions-runner
  become: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: Ensure letsencrypt directory exists
  file:
    path: /etc/letsencrypt
    state: directory
    mode: '0755'

- name: Create certificate registry
  template:
    src: certificate-registry.yml.j2
    dest: /etc/letsencrypt/certificate-registry.yml
    mode: '0644'

- name: Create logs directory for certificate management
  file:
    path: /var/log/letsencrypt
    state: directory
    mode: '0755'

- name: Create certificate generator script
  template:
    src: generate-certificates.py.j2
    dest: /usr/local/bin/generate-certificates
    mode: '0755'

- name: Create certificate deployer script
  template:
    src: deploy-certificates.py.j2
    dest: /usr/local/bin/deploy-certificates
    mode: '0755'

- name: Create certificate deployment directory
  file:
    path: /etc/letsencrypt/deployment
    state: directory
    mode: '0755'

- name: Copy certificate deployment playbooks
  copy:
    src: "{{ item }}"
    dest: "/etc/letsencrypt/deployment/{{ item | basename }}"
    mode: '0644'
  with_fileglob:
    - "{{ playbook_dir }}/deploy-*-certificate.yml"

- name: Create Cloudflare credentials file for certificate generation
  copy:
    dest: /etc/letsencrypt/cloudflare.ini
    content: dns_cloudflare_api_token = {{ cloudflare_api_token }}
    owner: root
    group: root
    mode: '0600'
  no_log: true

- name: Create Proxmox API token file for certificate deployment
  copy:
    dest: /etc/letsencrypt/proxmox-api-token.ini
    content: "{{ proxmox_api_token }}"
    owner: root
    group: root
    mode: '0600'
  no_log: true

- name: Generate certificates using certificate generator
  command: generate-certificates
  register: generate_certificates_result
  changed_when: "'[STATE_CHANGE]' in generate_certificates_result.stdout"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Deploy certificates to target systems
  command: deploy-certificates
  when: generate_certificates_result is changed
  ignore_errors: "{{ ansible_check_mode }}"

- name: Create certbot deploy hook directory
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory
    mode: '0755'

- name: Add certificate renewal hook for automatic deployments
  template:
    src: deploy-cert-hook.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/deploy/deploy-certificates-hook.sh
    mode: '0755'

- name: Ensure certbot timer is enabled
  systemd:
    name: certbot.timer
    enabled: yes
    state: started
  ignore_errors: "{{ ansible_check_mode }}"
