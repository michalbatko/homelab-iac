#!/usr/bin/env python3

import yaml
import subprocess
import sys
import logging
import argparse
from pathlib import Path
from datetime import datetime
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/letsencrypt/certificate-manager.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def print_log(message, level='info'):
    if level == 'error':
        logger.error(message)
    else:
        logger.info(message)
    print(message)

class CertificateManager:
    ADMIN_EMAIL = 'admin@batko.me'
    
    def __init__(self, registry_path='/etc/letsencrypt/certificate-registry.yml'):
        self.registry_path = registry_path
        self.registry = self._load_registry()
        self.letsencrypt_dir = Path('/etc/letsencrypt/live')
        
    def _load_registry(self):
        try:
            with open(self.registry_path, 'r') as f:
                registry = yaml.safe_load(f)
                print_log(f"Loaded certificate registry with {len(registry.get('certificates', {}))} domains")
                return registry
        except FileNotFoundError:
            print_log(f"Registry file not found: {self.registry_path}", 'error')
            sys.exit(1)
        except yaml.YAMLError as e:
            print_log(f"Error parsing registry YAML: {e}", 'error')
            sys.exit(1)
    
    def certificate_exists(self, domain_name):
        cert_path = self.letsencrypt_dir / domain_name / 'fullchain.pem'
        return cert_path.exists()
    
    def generate_certificate(self, domain_name):
        if domain_name not in self.registry['certificates']:
            print_log(f"Domain {domain_name} not found in registry", 'error')
            return False
        
        cert_config = self.registry['certificates'][domain_name]
        domains = cert_config['domains']
        
        if self.certificate_exists(domain_name):
            print_log(f"Certificate for {domain_name} already exists")
            return True
        
        cmd = [
            'certbot', 'certonly',
            '--dns-cloudflare',
            '--dns-cloudflare-credentials', '/etc/letsencrypt/cloudflare.ini',
            '--non-interactive',
            '--agree-tos',
            '-m', self.ADMIN_EMAIL
        ]
        
        for domain in domains:
            cmd.extend(['-d', domain])
        
        print_log(f"Starting certificate generation for {domain_name} (domains: {', '.join(domains)})")
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print_log(f"Certificate generated successfully for {domain_name}")
                return True
            else:
                print_log(f"Certificate generation failed for {domain_name}: {result.stderr}", 'error')
                return False
                
        except Exception as e:
            print_log(f"Exception during certificate generation for {domain_name}: {e}", 'error')
            return False
    
    def generate_all_certificates(self):
        certificates = self.registry.get('certificates', {})
        
        if not certificates:
            print_log("Certificate registry contains no certificate definitions")
            return True
        
        print_log(f"Starting certificate generation for {len(certificates)} domains")
        
        success_count = 0
        for domain_name in certificates.keys():
            if self.generate_certificate(domain_name):
                success_count += 1
        
        print_log(f"Certificate generation completed: {success_count}/{len(certificates)} successful")
        return success_count == len(certificates)

def main():
    parser = argparse.ArgumentParser(description='Certificate Manager for homelab infrastructure')
    
    parser.add_argument('domain', nargs='?', help='Domain name to generate certificate for')
    parser.add_argument('--all', action='store_true', help='Generate all missing certificates')
    
    args = parser.parse_args()
    
    if os.geteuid() != 0:
        print_log("Script executed without root privileges", 'error')
        sys.exit(1)
    
    try:
        manager = CertificateManager()
        
        if args.all:
            success = manager.generate_all_certificates()
            sys.exit(0 if success else 1)
        elif args.domain:
            success = manager.generate_certificate(args.domain)
            sys.exit(0 if success else 1)
        else:
            print_log("No domain specified and --all flag not provided", 'error')
            parser.print_help()
            sys.exit(1)
    
    except Exception as e:
        print_log(f"Unexpected error: {e}", 'error')
        sys.exit(1)

if __name__ == '__main__':
    main()
