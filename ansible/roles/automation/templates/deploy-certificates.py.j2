#!/usr/bin/env python3

import yaml
import subprocess
import sys
import logging
import os
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/letsencrypt/certificate-deployer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CertificateDeployer:
    def __init__(self, registry_path='/etc/letsencrypt/certificate-registry.yml'):
        self.registry_path = registry_path
        self.registry = self._load_registry()
        self.letsencrypt_dir = Path('/etc/letsencrypt/live')
        self.playbook_dir = Path('/etc/letsencrypt/deployment')
        self.inventory_path = '/etc/ansible/hosts.yml'
        self.ansible_ssh_key_path = '/opt/actions-runner/.ssh/ansible_key'
        
    def _load_registry(self):
        try:
            with open(self.registry_path, 'r') as f:
                registry = yaml.safe_load(f)
                logger.info(f"Loaded certificate registry containing {len(registry.get('certificates', {}))} definitions")
                return registry
        except FileNotFoundError:
            logger.error(f"Cannot open certificate registry '{self.registry_path}': No such file or directory")
            sys.exit(1)
        except yaml.YAMLError as e:
            logger.error(f"Cannot parse certificate registry: {e}")
            sys.exit(1)

    def deploy_nginx_certificates(self):
        deploy_playbook = self.playbook_dir / 'deploy-nginx-certificate.yml'
        
        if not deploy_playbook.exists():
            logger.error(f"Cannot open deployment playbook '{deploy_playbook}': No such file or directory")
            return False
        
        cmd = [
            '/usr/bin/sudo', '-u', 'actions-runner',
            'ansible-playbook',
            str(deploy_playbook),
            '-i', self.inventory_path,
            '-v',
            '--private-key', self.ansible_ssh_key_path
        ]
        
        logger.info("Deploying certificates to nginx servers")
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd='/etc/letsencrypt', timeout=300)
            
            if result.stdout:
                logger.info(f"Deployment playbook output:\n{result.stdout}")
            
            if result.returncode == 0:
                logger.info("Certificate deployment completed successfully")
                return True
            else:
                logger.error(f"Certificate deployment failed with return code {result.returncode}")
                if result.stderr:
                    logger.error(f"Error output: {result.stderr.strip()}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("Certificate deployment timed out after 300 seconds")
            return False
        
        except Exception as e:
            logger.error(f"Certificate deployment failed: {e}")
            return False
    
    def deploy_certificate(self, domain_name):
        logger.info(f"TODO: Deploy certificate for {domain_name}")
        return True
    
    def deploy_all_certificates(self):
        certificates = self.registry.get('certificates', {})
        
        if not certificates:
            logger.info("Certificate registry contains no certificate definitions")
            return True
        
        logger.info(f"Starting certificate deployment for {len(certificates)} domains")
        
        if not self.deploy_nginx_certificates():
            logger.error("Failed to deploy certificates to nginx servers")
            return False
        
        for domain_name in certificates.keys():
            self.deploy_certificate(domain_name)
        
        return True

def main():
    if os.geteuid() != 0:
        logger.error("Script must be executed with root privileges")
        sys.exit(1)
    
    try:
        deployer = CertificateDeployer()
        success = deployer.deploy_all_certificates()
        sys.exit(0 if success else 1)
    
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()